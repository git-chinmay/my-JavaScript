null vs undefined
========================
var tag;
console.log(tag)

tag = null
console.log(tag)

console.log(typeof(null))
console.log(typeof(undefined))
console.log(1+null)
console.log(1+undefined)
console.log(null==undefined)
console.log(null === undefined)
console.log(!null) //null bydefult is false
console.log(!!null) // !false=true >>!!false>!true>false
console.log(!undefined)
console.log(!!undefined) 



variable declaration:-
===========================
  if(true){
    //var x = 3;
    let x = 3;
  }
  console.log(x)
  ------------------
intialisation:-
let x;
x = 5
console.log(x)
----------------------
const x; //will throw error
------------------------


Operators:-
=============================
Arithmetic Operators
-----------------------
console.log(4+5)
console.log(4-5)
console.log("Hello"+"World")
console.log(4 +"Hello") //yes JS is a weekly typed language unlike python and Java which are strong type

Comparision operator
-------------------------
0 == false   // true
0 === false  // false, because they are of a different type
1 == "1"     // true, automatic type conversion for value only
1 === "1"    // false, because they are of a different type
null == undefined // true
null === undefined // false
'0' == false // true
'0' === false // false

console.log(0 == false)

Terenary Operator
---------------------------

=============================
if else 
==============================
var x = 50
if(x===10){
  console.log("x is 10")
}
else if(x===50){
  console.log("x is 50")
}
else if(x===100){
  console.log("x is 100")
}
else{
  console.log("x is invalid.")
}


switch
-------------------------------
var x = 50;

switch(x){
  case 10:
    console.log("x is 10")
    break;
  case 50:
    console.log("x is 50")
    break;
  case 100:
    console.log("x is 100")
    break;
  default:
    console.log("x is invalid.")
}
----------------------------------
forEACH Loop
===========================
let grocery = ['sugar','salt','walnut'];
/*
grocery.forEach(pass the function)

//step-1 Make the arrow Function
let grfun = (groceryitem) => {console.log("Item is: ",groceryitem)};

//step-2 Pass the arrow function to forEach
grocery.forEach(let grfun = (groceryitem) => {console.log("Item is: ",groceryitem)});
*/
//step-3 Remove unnecessery items
grocery.forEach(groceryitem => console.log("Item is: ",groceryitem));


---------------------------------------------------
For loop and forEach
----------------------------------------------------
for (let i=0; i<=5;i++)
{console.log(i)}

//For loop
x = ["Mon","Tues","Wed","Thurs","Fri","Sat","Sun"]
for (let i =0;i<x.length;i++){
  console.log(x[i])
}

//Foreach
var days = (day) => {console.log(day)}
x.forEach(days)


------------------------------------------------------------------------
=======================
Object Property
=======================
let spaceship = {color : "yellow",
                "fueltype" : "diesel" };

console.log(spaceship.color)
console.log(spaceship['color'])

Accessing Nested Object:-
--------------------------
let spaceship = {
  //key-1 List
  passenger:[{name: 'space dog'},{age: 3}],
  
  //key-2 An object
  telescope:{
    yearBuilt: 2018,
    model: "91031-XLT",
    focalLength: 2032
  },
  
  //key-3 Anoter object
  crew:{
    //key-3 Nested Object (one Insider object)
    captain:{
      name: 'Sandra',
      degree: 'Computer Engineering',
      //Method of caprain object
      encourageTeam() {console.log('We got this!')},
      'favorite food':['cookies','cakes','candy']
    }
  },
  
  //Key-4 An Object
  engine:{model:'Nimbus 2000'},
  
  //Key-5 Nested Object(Two Insider Object)
  nanoelectronics:{
    //First Insider object
    computer:{
      terabytes:100,
      monitor:'HD'
    },
    //second Insider Object
    backup:{
      battery:'Lithium',
      Amphere:'50'
    }
    
  }
  
};

//Trying to access the captain's degree
console.log(spaceship['crew']['captain']['degree'])


--------------------------------------------
FACTORY FUNCTION
--------------------------------------------
const monsterFactory=(name,age,sound)=> {
  return {
    name:name,
    age:age,
    scare(){
      console.log("Monster sounds: " +sound)
    }
  }
}

ghost = monsterFactory("Ghoul",350,"BHOO!")
console.log(ghost.name)
console.log(ghost.age)
ghost.scare()

=====Havascript HTML DOM==============================================
DOM METHOD AND PROPERTIES TO ACCESS THE CONTENT

<html>
  <body>
    <p id="demo">"Hello World in p1"</p>
    <p id="demo2">"Hello World in P2"</p>

    <script>
      document.getElementById("demo").innerHTML;
      document.getElementById("demo2").innerHTML =
        "Second para value replaced.";
    </script>
  </body>
</html>


TO DISPALY SOMETHING "WRITE" COMMAND

<!DOCTYPE html>
<html>
  <body>
    <script>
      document.write(Date());
    </script>
  </body>
</html>


============================NodeJS===================================
REQUIRE AND EXPORT
main.js file:-

var source = require("./targetFile");
source.add();
console.log(source.aval);

targetFile.js:-

function addition() {
  console.log("This is addition function");
}

var a = 10;
module.exports.add = addition;
module.exports.aval = a;
---------------------------------
HTTP MODULE (SERVER CREATION)
------------------------------
const http = require("http");
const server = http
  .createServer(function(req, res) {
    res.writeHead(200, { "content-type": "text/html" });
    res.write("<h1>Node JS Test server Running</h1>");
    res.end();
  })
  .listen(3000, () => console.log("Server is running on port 3000"));
  
--------------------------------------------
FILESYSTEM MODULE EXAMPLE
--------------------------------------------
const f = require("fs");
f.readFile(__dirname + "/ReadFileTest.txt", "utf8", (err, data) => {
    if (err) {
        throw err
    }
    else {
        console.log(data)
    }
})

NOTE:- CREATE THE ReadFileTest.txt first 

---------------------------------------------
READING FILE IN SERVER
---------------------------------------------
const f = require("fs");
const http = require("http");

const server = http.createServer(function (req, res) {

    f.readFile(__dirname + "/ReadFileTest.txt", "utf8", (err, data) => {
        res.writeHead(200, { "content-type": "text/plain" });
        if (err) {
            throw err
        }
        else {
            res.write(data)
        }
        res.end();
    })
}).listen(3000, () => console.log("Server running at 3000"))


